
# Задача 1. два числа это длина и ширина прямоугольника нарисовать прямоугольник из иксов

def risyemRect(row,col):
    field=[]#row=len
    # field.append(str(i)+" " for i in range(0,col+1))
    field.append("".join(str(i)+" " for i in range(0,col+1)))
    for i in range(1,row+1):
        field.append(str(i)+" "+"z "*col)
    for i in range(len(field)):
        print(field[i])
        
# risyemRect(5,5)

# ///////////--------->


# Задача 2. допом дается 2 числа это корды места где должен быть ноль

def risyemRect(row,col,rowTO,colTO):
    field=[]#row=len
    field.append("".join(str(i)+" " for i in range(0,col+1)))
    for i in range(1,row+1):
        field.append(str(i)+" "+"z "*col)
    #zamena
    field[rowTO]=field[rowTO][:(colTO*2)]+"0"+field[rowTO][(colTO*2)+1:]
    #===
    for i in range(len(field)):
        print(field[i])

risyemRect(5,5,3,3)

# ///////////--------->

# Задача 3 
# Входят данные формата 
# Х0
# 0Х

# Значит в поле 2на2 ты должен нарисовать (n=1)
# Х0 --
# 0X --
# -- Х0
# -- 0Х
# допом можно ввести n которое типа будет масштабом т е если n=2 то 
# Х0 -- X0 -- -- -- -- --
# 0X -- 0X -- -- -- -- --
# -- X0 -- X0 -- -- -- --
# -- 0X -- 0X -- -- -- --
# -- -- -- -- Х0 -- Х0 -- 
# -- -- -- -- 0Х -- 0X --
# -- -- -- -- -- Х0 -- X0
# -- -- -- -- -- 0Х -- 0X
 
#  
# 0X0 верх
# 0X0 низ
# to масштаб = 1 => 3^1
# --- 0X0 --- | X00 --- --- => верх
# --- 0X0 --- | 00X --- --- => верх      ЭТО ПРИ ТОМ ЧТО 3=n=3
# --- 0X0 --- | --- --- X00 => низ
# --- 0X0 --- | --- --- 00X => низ
# масштаб = 2 => 3^2 
#1 X00 --- --- --- --- --- --- --- ---
#2 00X --- --- --- --- --- --- --- ---
#3 --- --- X00 --- --- --- --- --- ---
#4 --- --- 00X --- --- --- --- --- ---
#5 --- --- --- --- --- --- X00 --- ---
#6 --- --- --- --- --- --- 00X --- ---
#7 --- --- --- --- --- --- --- --- X00
#8 --- --- --- --- --- --- --- --- 00X

#1  --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
#2  --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
#3  --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
#4  --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
#5  --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
#6  --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
#7  --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
#8  --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
#9  --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
#10 --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
#11 --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
#12 --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
#13 --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
#14 --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
#15 --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
#16 --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---



# если n=2 То
# Х0 -- -- --
# 0X -- -- --
# -- X0 -- --
# -- 0X -- --
# -- -- X0 -- 
# -- -- 0X --
# -- -- -- X0
# -- -- -- 0X


def stepenORnot(a, b):
    if b <= 1:
        return a == b  # eсли b <= 1, то a может быть только 0 или 1
    if a < 1:
        return False  # cтепени положительного b не могут быть меньше 1
    while a > 1:
        if a % b != 0:
            return False
        a //= b
    return True

# СДЕЛАЛ В ОТДЕЛЬНОМ ФАЙЛЕ А ТУТ ОСТАВИЛ ЧТОБЫ ПРОСТО ПРОСЛЕДИТЬ +- ПУТЬ КОТОРЫЙ Я ПРОШОЛ ОТ НАЧАЛА ДО КОНЦА
# СТРОИЛ ДОМ БЛЯ С КРЫШЫ
def kybikPrikolov(stroka1,stroka2,n):

    if (len(stroka2)!=len(stroka1)):
        print("введены неверные данные (длина строк не равна)")
        return 0
    if n in None or not isinstance(n, int):
        n=1

    RETURNfield=[]
    baseField=[]
    baseLines=list().append(stroka1).append(stroka2)# ТК КОЛВО СТРОК ВСЕГО "2"!!!!!!!!!!!!!!
    # n = 3 =-> --- --- --- 
    #           --- --- ---
    # от n зависит длина од#####ной строки
    for i in baseLines:
        len1=""
        # X0X
        # X0X
        for j in range(len(i)):
            if stroka1[j]=="X":
                len1.join(i+" ")
            elif():
                len1.join("-"*len(i) + " ")
        baseField.append(len1);
        # ROW = 2 CONST
    
    #время масштабироваться
    # ^$&$@*$@*9 РАСШИРЕНИЕ ТЕРРИТОРИИ ?;"?*№:_)"!"
     
    # подготовим альтернативу --- --- --- 
    # altBASEfield=["".join("-"*len(stroka1) +" " for j in range(len(stroka1))),"".join("-"*len(stroka1) +" " for j in range(len(stroka1)))]
    # for i in range
    #надо разобраться с масштабом ===>> разобрались масштаб = n столбов = len(str)**n а строк 4*n
    #начинаем заполнять то что будем выводить
    for i in range(4*n):
        itogSTR=""
        for j in baseLines:


            for k in j:



    
